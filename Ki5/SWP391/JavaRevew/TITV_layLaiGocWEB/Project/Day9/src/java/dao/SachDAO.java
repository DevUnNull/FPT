/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package dao;

import java.sql.Connection;
import database.DBContext;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.util.ArrayList;
import model.Sach;
import java.sql.ResultSet;

/**
 *
 * @author User
 */
public class SachDAO implements DAOInterface<Sach>{

    private static SachDAO instance ;
    public static SachDAO getInstance(){
        if(instance == null){
            instance = new SachDAO();
        }
        return instance;
    }
    DBContext db = DBContext.getInstance();
    
    @Override
    public int insert(Sach t) {
        Connection conn = null;
        PreparedStatement ps = null;
        int result = 0;

        try {
            // B∆∞·ªõc 1: K·∫øt n·ªëi CSDL
            conn = db.getConnection();
            if (conn != null) {
                // B∆∞·ªõc 2: T·∫°o ƒë·ªëi t∆∞·ª£ng PreparedStatement
                String sql = "INSERT INTO Sach (id, tenSach, giaBan, namXuatBan) VALUES (?, ?, ?, ?)";
                ps = conn.prepareStatement(sql);
                ps.setInt(1, t.getId());
                ps.setString(2, t.getTenSach());
                ps.setDouble(3, t.getGiaBan());
                ps.setInt(4, t.getNamXuatBan());

                // B∆∞·ªõc 3: Th·ª±c thi c√¢u l·ªánh SQL
                result = ps.executeUpdate();
            }
        } catch (SQLException e) {
            System.out.println("L·ªói insert: " + e.getMessage());
        } finally {
            // ƒê√≥ng t√†i nguy√™n
            if (ps != null) {
                try { ps.close(); } catch (SQLException e) {}
            }
            if (conn != null) {
                //db.closeConnection(conn);
            }
        }
        return result; // Tr·∫£ v·ªÅ s·ªë h√†ng b·ªã ·∫£nh h∆∞·ªüng
    }

    @Override
    public int Update(Sach t) {
        Connection conn = null;
        PreparedStatement ps = null;
        int result = 0;

        try {
            // B∆∞·ªõc 1: K·∫øt n·ªëi CSDL
            conn = db.getConnection();
            if (conn != null) {
                // B∆∞·ªõc 2: T·∫°o ƒë·ªëi t∆∞·ª£ng PreparedStatement
                String sql = "UPDATE Sach SET tenSach = ?, giaBan = ?, namXuatBan = ? WHERE id = ?";
                ps = conn.prepareStatement(sql);
                
                ps.setString(1, t.getTenSach());
                ps.setDouble(2, t.getGiaBan());
                ps.setInt(3, t.getNamXuatBan());
                ps.setInt(4, t.getId());
                // B∆∞·ªõc 3: Th·ª±c thi c√¢u l·ªánh SQL
                result = ps.executeUpdate();
                System.err.println("Update thanh cong sach co ID: "+t.getId());
            }
        } catch (SQLException e) {
            System.out.println("L·ªói update: " + e.getMessage());
        } finally {
            // ƒê√≥ng t√†i nguy√™n
            if (ps != null) {
                try { ps.close(); } catch (SQLException e) {}
            }
            if (conn != null) {
                //db.closeConnection(conn);
            }
        }
        
        return result; // Tr·∫£ v·ªÅ s·ªë h√†ng b·ªã ·∫£nh h∆∞·ªüng
    }

    @Override
    public int Delete(Sach t) {
        Connection conn = null;
        PreparedStatement ps = null;
        int result = 0;

        try {
            // B∆∞·ªõc 1: K·∫øt n·ªëi CSDL
            conn = db.getConnection();
            if (conn != null) {
                // B∆∞·ªõc 2: T·∫°o ƒë·ªëi t∆∞·ª£ng PreparedStatement
                String sql = "DELETE FROM Sach WHERE id = ?";
                ps = conn.prepareStatement(sql);
                
                ps.setInt(1, t.getId());
                // B∆∞·ªõc 3: Th·ª±c thi c√¢u l·ªánh SQL
                result = ps.executeUpdate();
                System.err.println("Delete thanh cong sach co ID: "+t.getId());
            }
        } catch (SQLException e) {
            System.out.println("L·ªói Delete: " + e.getMessage());
        } finally {
            // ƒê√≥ng t√†i nguy√™n
            if (ps != null) {
                try { ps.close(); } catch (SQLException e) {}
            }
            if (conn != null) {
                //db.closeConnection(conn);
            }
        }
        
        return result; // Tr·∫£ v·ªÅ s·ªë h√†ng b·ªã ·∫£nh h∆∞·ªüng
    }

    @Override
    public ArrayList<Sach> selectAll() {
        ArrayList<Sach> dsSach = new ArrayList<>(); // 1. Kh·ªüi t·∫°o danh s√°ch k·∫øt qu·∫£
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            conn = db.getConnection(); // 2. M·ªü k·∫øt n·ªëi ƒë·∫øn CSDL

            if (conn != null) {
                String sql = "SELECT * FROM Sach"; // 3. C√¢u l·ªánh SQL
                ps = conn.prepareStatement(sql);   // 4. Chu·∫©n b·ªã th·ª±c thi SQL
                rs = ps.executeQuery();            // 5. Th·ª±c thi c√¢u SQL => tr·∫£ v·ªÅ ResultSet

                while (rs.next()) { // 6. L·∫∑p qua t·ª´ng d√≤ng k·∫øt qu·∫£
                    int id = rs.getInt("id");
                    String tenSach = rs.getString("tenSach");
                    double giaBan = rs.getDouble("giaBan");
                    int namXuatBan = rs.getInt("namXuatBan");

                    // 7. T·∫°o ƒë·ªëi t∆∞·ª£ng Sach t·ª´ d·ªØ li·ªáu
                    Sach sach = new Sach(id, tenSach, giaBan, namXuatBan);

                    // 8. Th√™m v√†o danh s√°ch
                    dsSach.add(sach);
                }
            }
        } catch (SQLException e) {
            System.out.println("L·ªói selectAll: " + e.getMessage());
            e.printStackTrace();
        } finally {
            // 9. ƒê√≥ng t√†i nguy√™n (ResultSet, PreparedStatement, Connection)
            try {
                if (rs != null) rs.close();
                if (ps != null) ps.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            if (conn != null) {
                db.closeConnection(conn); // n·∫øu b·∫°n c√≥ h√†m closeConnection trong DBContext
            }
        }

        return dsSach; // 10. Tr·∫£ v·ªÅ danh s√°ch k·∫øt qu·∫£
    }



    @Override
    public Sach selectById(int t) {
        Sach findSach = null; // 1. Kh·ªüi t·∫°o danh s√°ch k·∫øt qu·∫£
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            conn = db.getConnection(); // 2. M·ªü k·∫øt n·ªëi ƒë·∫øn CSDL

            if (conn != null) {
                String sql = "SELECT * FROM Sach Where id = ?"; // 3. C√¢u l·ªánh SQL
                ps = conn.prepareStatement(sql);   // 4. Chu·∫©n b·ªã th·ª±c thi SQL
                ps.setInt(1, t);
                rs = ps.executeQuery();            // 5. Th·ª±c thi c√¢u SQL => tr·∫£ v·ªÅ ResultSet

                if (rs.next()) { // 6. L·∫∑p qua t·ª´ng d√≤ng k·∫øt qu·∫£
                    int id = rs.getInt("id");
                    String tenSach = rs.getString("tenSach");
                    double giaBan = rs.getDouble("giaBan");
                    int namXuatBan = rs.getInt("namXuatBan");

                    // 7. T·∫°o ƒë·ªëi t∆∞·ª£ng Sach t·ª´ d·ªØ li·ªáu
                    findSach = new Sach(id, tenSach, giaBan, namXuatBan);
                }else{
                    System.err.println("khong tim thay sach");
                }
            }
        } catch (SQLException e) {
            System.out.println("L·ªói selectById: " + e.getMessage());
            e.printStackTrace();
        } finally {
            // 9. ƒê√≥ng t√†i nguy√™n (ResultSet, PreparedStatement, Connection)
            try {
                if (rs != null) rs.close();
                if (ps != null) ps.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            if (conn != null) {
                db.closeConnection(conn); // n·∫øu b·∫°n c√≥ h√†m closeConnection trong DBContext
            }
        }

        return findSach; // 10. Tr·∫£ v·ªÅ danh s√°ch k·∫øt qu·∫£
    }

    public ArrayList<Sach> selectByCondition(String condition) {
        ArrayList<Sach> dsSach = new ArrayList<>();
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;

        // C√°c tr∆∞·ªùng h·ª£p ƒëi·ªÅu ki·ªán h·ª£p l·ªá
        String[] validConditions = {"ID", "TenSach", "GiaBan"};

        // Ki·ªÉm tra ƒëi·ªÅu ki·ªán h·ª£p l·ªá
        if (condition == null || condition.trim().isEmpty()) {
            throw new IllegalArgumentException("ƒêi·ªÅu ki·ªán kh√¥ng th·ªÉ r·ªóng!");
        }

        // T·∫°o c√¢u truy v·∫•n SQL c∆° b·∫£n
        String sql = "SELECT * FROM Sach";

        try {
            conn = db.getConnection();

            // Ki·ªÉm tra n·∫øu ƒëi·ªÅu ki·ªán c√≥ ch·ª©a c√°c k√Ω t·ª± nguy hi·ªÉm
            if (containsDangerousCharacters(condition)) {
                throw new SQLException("ƒêi·ªÅu ki·ªán kh√¥ng h·ª£p l·ªá, c√≥ ch·ª©a k√Ω t·ª± nguy hi·ªÉm!");
            }

            // Ki·ªÉm tra ƒëi·ªÅu ki·ªán ng∆∞·ªùi d√πng nh·∫≠p v√†o
            boolean isValid = false;
            for (String validCondition : validConditions) {
                if (condition.toLowerCase().contains(validCondition.toLowerCase())) {
                    isValid = true;
                    break;
                }
            }

            if (!isValid) {
                throw new SQLException("ƒêi·ªÅu ki·ªán kh√¥ng h·ª£p l·ªá!");
            }

            // N·∫øu ƒëi·ªÅu ki·ªán h·ª£p l·ªá, x√¢y d·ª±ng c√¢u truy v·∫•n v·ªõi WHERE
            sql += " WHERE " + condition;

            System.out.println("üß™ SQL ƒëang ch·∫°y: " + sql);

            // S·ª≠ d·ª•ng PreparedStatement
            ps = conn.prepareStatement(sql);

            // Th·ª±c thi c√¢u truy v·∫•n
            rs = ps.executeQuery();

            // ƒê·ªçc k·∫øt qu·∫£ v√† th√™m v√†o danh s√°ch
            while (rs.next()) {
                int id = rs.getInt("ID");
                String tenSach = rs.getString("TenSach");
                double giaBan = rs.getDouble("GiaBan");
                int namXuatBan = rs.getInt("NamXuatBan");

                Sach sach = new Sach(id, tenSach, giaBan, namXuatBan);
                dsSach.add(sach);
            }
        } catch (SQLException e) {
            System.out.println("L·ªói SelectByCondition: " + e.getMessage());
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (ps != null) ps.close();
                if (conn != null) db.closeConnection(conn);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return dsSach;
    }

    // H√†m ki·ªÉm tra k√Ω t·ª± nguy hi·ªÉm (SQL Injection)
    private boolean containsDangerousCharacters(String condition) {
        // Danh s√°ch c√°c t·ª´ kh√≥a nguy hi·ªÉm c√≥ th·ªÉ d√πng trong SQL Injection
        String[] dangerousKeywords = {"--", ";", "/*", "*/", "drop", "delete", "insert", "update", "or", "select", "union"};

        for (String keyword : dangerousKeywords) {
            if (condition.toLowerCase().contains(keyword)) {
                return true;
            }
        }
        return false;
    }





}
